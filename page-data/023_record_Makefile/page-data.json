{"componentChunkName":"component---src-templates-blog-post-js","path":"/023_record_Makefile/","result":{"data":{"site":{"siteMetadata":{"title":"JokerDebug"}},"markdownRemark":{"id":"3c1aacd8-e3ca-58de-b357-9c789c6d3118","excerpt":"一种常用于编译的脚本语言，可以更好更方便地管理项目的代码编译。在文件中定义一系列的规则来指定哪些文件先编译，一旦写好后，只需要一个 make 命令就可以编译 一、Makefile 三要素 一般在 makefile 文件中会使用  命令对源代码进行编译 makefile 的编写规则： 二、Makefile…","html":"<blockquote>\n<p>一种常用于编译的脚本语言，可以更好更方便地管理项目的代码编译。在文件中定义一系列的规则来指定哪些文件先编译，一旦写好后，只需要一个 make 命令就可以编译</p>\n</blockquote>\n<h3>一、Makefile 三要素</h3>\n<ul>\n<li>一般在 makefile 文件中会使用 <code class=\"language-text\">gcc</code> 命令对源代码进行编译</li>\n<li>makefile 的编写规则：</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\"><span class=\"token target symbol\">目标</span><span class=\"token punctuation\">:</span>依赖\r\n\t命令\r\n// 目标：要生成的目标文件\r\n// 依赖：目标文件由哪些文件生成\r\n// 命令：执行该命令由依赖文件生成目标</code></pre></div>\n<h3>二、Makefile 工作原理</h3>\n<p>Makefile 的 工作原理 可以概括为两步：</p>\n<ol>\n<li>检查依赖是否 <strong>存在</strong></li>\n<li>检查是否需要 <strong>更新</strong></li>\n</ol>\n<ul>\n<li>可以用以下伪代码来进行表述</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 检查依赖是否存在\r\nif(依赖存在)\r\n\t//执行规则中的命令生成依赖文件的目标文件\r\n\tif(目标的修改时间 > 依赖的修改时间)\r\n\t\t不更新目标文件\r\n\telse\r\n\t\t更新目标文件\r\nelse\r\n\t向下搜索，查找是否有生成该依赖文件的规则\r\n\tif(没有规则能生成该依赖文件)\r\n\t\tERROR!</code></pre></div>\n<h3>三、Makefile 基本使用方法</h3>\n<p>我们以经典的 TCP 通讯为例来说明，当我们编写了 TCP 的服务端和客户端两个程序后，要进行编译的话需要运行两次 <code class=\"language-text\">gcc</code> 指令，比较繁琐，尤其是当我们项目工程具有更多的源文件时，使用 makefile 实现一键编译，将非常的方便。</p>\n<ul>\n<li><strong>makefile编写</strong>，生成 TCP_Server、TCP_Client 两个可执行文件。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\"><span class=\"token target symbol\">all</span><span class=\"token punctuation\">:</span>TCP_Server TCP_Client\r\n<span class=\"token target symbol\">TCP_Server</span><span class=\"token punctuation\">:</span>tcp_server.c\r\n\tgcc tcp_server.c -o TCP_Server\r\n<span class=\"token target symbol\">TCP_Client</span><span class=\"token punctuation\">:</span>tcp_client.c\r\n\tgcc tcp_client.c -o TCP_Client</code></pre></div>\n<blockquote>\n<p>编写完成后，我们只需在当前目录下运行 <code class=\"language-text\">make all</code> 即可同时编译生成 TCP_Server、TCP_Client 两个目标文件。具体的 Makefile 变量、指令、参数将在下文展开。</p>\n</blockquote>\n<ul>\n<li><strong>运行可执行文件</strong>（以 TCP 程序为例）</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"linux\"><pre class=\"language-linux\"><code class=\"language-linux\">./TCP_Server 192.168.0.109 1234\r\n./TCP_Client 192.168.0.109 1234</code></pre></div>\n<h3>四、Makefile 变量</h3>\n<h4>1、变量类型</h4>\n<ol>\n<li>自定义变量</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var = abc     // 变量定义</code></pre></div>\n<ol start=\"2\">\n<li>系统变量</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\">CC <span class=\"token operator\">=</span> gcc-3.4                     // 指定编译器的类型\r\nCPPFLAGS <span class=\"token operator\">=</span> -I./                  // 指定预处理的选项 \r\nCFLAGS <span class=\"token operator\">=</span> -Wall -O2               // 指定编译器选项（例如调试信息、优化等）\r\nLDFLAGS <span class=\"token operator\">=</span> -L                     // 指定链接器选项\r\nSRC_FILES <span class=\"token operator\">=</span> main.c foo.c bar.c   // 指定源文件列表</code></pre></div>\n<p>注意：变量引用时使用<code class=\"language-text\">$</code>，例：<code class=\"language-text\">$(CC)</code>。\r\n3. 自动变量</p>\n<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\"><span class=\"token variable\">$@</span> 表示当前规则的目标文件\r\n<span class=\"token variable\">$^</span> 表示规则中的所有条件, 组成一个列表, 以空格隔开, 如果这个列表中有重复的项则消除重复项 \r\n<span class=\"token variable\">$&lt;</span> 表示当前规则的第一个依赖文件名\r\n<span class=\"token variable\">$?</span> 第一变化的依赖</code></pre></div>\n<ol start=\"4\">\n<li><code class=\"language-text\">$</code>使用拓展：用于执行 Shell 命令，如<code class=\"language-text\">NAME := $(shell uname)</code>，会执行 <code class=\"language-text\">uname</code> 命令，返回当前操作系统的名称</li>\n</ol>\n<h4>2、赋值方式</h4>\n<p>makefile 的赋值方式有简单赋值、递归赋值、条件赋值、追加赋值。本文只介绍最为常用的赋值方式，即简单赋值 <code class=\"language-text\">=</code>。（其余赋值方式可参考文章：<a href=\"https://blog.csdn.net/m0_49476241/article/details/130556354\">Makefile基础教程（变量的介绍和使用）_makefile 使用变量 编译-CSDN博客</a>）</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">x = abc         // 定义变量并赋值 \r\nbar = $(x)      // 使用变量, $(变量名)</code></pre></div>\n<ol>\n<li>简单赋值<code class=\"language-text\">:=</code>，在赋值时立即求值</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\">A <span class=\"token operator\">=</span> foo\r\nB <span class=\"token operator\">:=</span> <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span>\r\nA <span class=\"token operator\">=</span> bar\r\n\r\n<span class=\"token target symbol\">all</span><span class=\"token punctuation\">:</span>\r\n    echo <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 输出 foo</span></code></pre></div>\n<ol start=\"2\">\n<li>递归赋值<code class=\"language-text\">=</code>，在使用变量时才会求值（即延迟求值）</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\">A <span class=\"token operator\">=</span> foo\r\nB <span class=\"token operator\">=</span> <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span>\r\nA <span class=\"token operator\">=</span> bar\r\n\r\n<span class=\"token target symbol\">all</span><span class=\"token punctuation\">:</span>\r\n    echo <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 输出 bar，A由B下一行代码修改为 bar</span></code></pre></div>\n<h3>五、Makefile 工程应用</h3>\n<h4>1、编译操作</h4>\n<p>makefile 在工程上的应用示例如下：</p>\n<ol>\n<li>编译 main.c 、 fun1.c 、 func2.c 生成对应的目标文件 <code class=\"language-text\">main.o、func1.o、func2.0</code></li>\n<li>链接所有的目标文件，生成最后的可执行文件</li>\n</ol>\n<ul>\n<li>基础写法</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\">CC <span class=\"token operator\">:=</span> gcc\r\nTARGET <span class=\"token operator\">:=</span> hello\r\n\r\n<span class=\"token comment\"># 生成可执行文件</span>\r\n<span class=\"token target symbol\">TARGET</span> <span class=\"token punctuation\">:</span> hello.o func.o\r\n\t<span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>CC<span class=\"token punctuation\">)</span> -o TARGET hello.o func.o\r\n\r\n<span class=\"token comment\"># 生成目标文件</span>\r\n<span class=\"token target symbol\">hello.o</span> <span class=\"token punctuation\">:</span> hello.c\r\n\t<span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>CC<span class=\"token punctuation\">)</span> -c -o hello.o hello.c\r\n<span class=\"token target symbol\">func.o</span> <span class=\"token punctuation\">:</span> func.c\r\n\t<span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>CC<span class=\"token punctuation\">)</span> -c -o func.o func.c\r\n\r\n<span class=\"token target symbol\">all</span> <span class=\"token punctuation\">:</span> TARGET</code></pre></div>\n<blockquote>\n<p>gcc 编译器参数大全可参考：<a href=\"http://static.kancloud.cn/machh03/server/2141855\">20个最常用的GCC编译器参数</a></p>\n</blockquote>\n<p>常用参数：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">-o    指定输出文件名\r\n-c    只编译源代码，生成目标文件，但不会生成最终可执行文件</code></pre></div>\n<ul>\n<li>进阶写法</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\">TARGET <span class=\"token operator\">=</span> hello\r\nobject <span class=\"token operator\">=</span> hello.o func1.o func2.o\r\nCC <span class=\"token operator\">=</span> gcc\r\nCFLAGS <span class=\"token operator\">=</span> -Wall -O2\r\n\r\n<span class=\"token target symbol\">TARGET</span> <span class=\"token punctuation\">:</span> <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span>\r\n\t<span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>CC<span class=\"token punctuation\">)</span> -o <span class=\"token variable\">$@</span> <span class=\"token variable\">$^</span>     <span class=\"token comment\"># 规则中的目标 规则中的依赖</span>\r\n\t\r\n<span class=\"token target symbol\">%.o</span> <span class=\"token punctuation\">:</span> %.c \r\n\t<span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>CC<span class=\"token punctuation\">)</span> -o <span class=\"token variable\">$@</span> -c <span class=\"token variable\">$&lt;</span>  <span class=\"token comment\"># 规则中的目标 规则中的第一个条件</span></code></pre></div>\n<h4>2、清理操作</h4>\n<blockquote>\n<p><strong>清除目标文件</strong>，在 makefile 中使用 rm 指令删除文件，然后在终端中输入 make clean= 清除生成的目标文件</p>\n</blockquote>\n<ul>\n<li>基础写法</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\"><span class=\"token comment\"># 清除所有 .o 后缀文件及可执行文件</span>\r\n<span class=\"token target symbol\">clean</span> <span class=\"token punctuation\">:</span>\r\n\trm *.o TARGET</code></pre></div>\n<blockquote>\n<p>参数： <code class=\"language-text\">rm -f</code> 强制执行删除操作。</p>\n</blockquote>\n<ul>\n<li>进阶写法</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\"><span class=\"token target symbol\">clean</span><span class=\"token punctuation\">:</span> -rm -f <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span> <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"【学习随记】编译神器_Makefile","date":"January 03, 2023","description":"本文将介绍一个强大的编译脚本Makefile"}},"previous":{"fields":{"slug":"/022_record_Obsidian/"},"frontmatter":{"title":"【学习随记】科研神器_WebPlotDigitizer"}},"next":{"fields":{"slug":"/024_record_asm/"},"frontmatter":{"title":"【学习随记】汇编语言_伪指令大全"}}},"pageContext":{"id":"3c1aacd8-e3ca-58de-b357-9c789c6d3118","previousPostId":"7e4cdbd4-4889-5a9e-ac34-66c6b48deb77","nextPostId":"9b16e5a2-1f46-5e82-8d69-c9108958daa7"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}