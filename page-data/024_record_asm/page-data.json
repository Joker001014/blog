{"componentChunkName":"component---src-templates-blog-post-js","path":"/024_record_asm/","result":{"data":{"site":{"siteMetadata":{"title":"JokerDebug"}},"markdownRemark":{"id":"9b16e5a2-1f46-5e82-8d69-c9108958daa7","excerpt":"伪指令前通常加一个  来区分它们与普通的机器指令。\r\n 主要起到区分伪指令和机器指令的作用。伪指令不会生成机器码，而是告诉汇编器如何组织和布局程序，而机器指令是直接由 CPU 执行的。 .text 和 .data 放在一起，表示不区分代码段、数据段 以  开头的伪指令是汇编器（Assembler…","html":"<blockquote>\n<p>伪指令前通常加一个 <code class=\"language-text\">.</code> 来区分它们与普通的机器指令。\r\n<code class=\"language-text\">.</code> 主要起到<strong>区分伪指令和机器指令</strong>的作用。伪指令不会生成机器码，而是告诉汇编器如何组织和布局程序，而机器指令是直接由 CPU 执行的。</p>\n</blockquote>\n<blockquote>\n<p>.text 和 .data 放在一起，表示不区分代码段、数据段</p>\n</blockquote>\n<blockquote>\n<p>以 <code class=\"language-text\">.</code> 开头的伪指令是汇编器（Assembler）提供的 <strong>汇编器指令</strong>（Assembler Directives），用于控制汇编过程、定义数据、布局内存等。以下是常见的 RISC-V 汇编器指令及其作用的分类表格：</p>\n</blockquote>\n<hr>\n<h3><strong>1. 数据定义伪指令</strong></h3>\n<table>\n<thead>\n<tr>\n<th><strong>伪指令</strong></th>\n<th><strong>格式</strong></th>\n<th><strong>作用</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">.data</code></td>\n<td><code class=\"language-text\">.data</code></td>\n<td>切换到数据段，后续定义的数据将存储在数据段中。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">.rodata</code></td>\n<td><code class=\"language-text\">.rodata</code></td>\n<td>切换到只读数据段，后续定义的数据将存储在只读数据段中。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">.bss</code></td>\n<td><code class=\"language-text\">.bss</code></td>\n<td>切换到未初始化数据段（BSS 段），后续定义的数据将存储在 BSS 段中。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">.byte</code></td>\n<td><code class=\"language-text\">.byte value1, value2, ...</code></td>\n<td>定义一个或多个字节数据。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">.half</code></td>\n<td><code class=\"language-text\">.half value1, value2, ...</code></td>\n<td>定义一个或多个半字（2 字节）数据。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">.word</code></td>\n<td><code class=\"language-text\">.word value1, value2, ...</code></td>\n<td>定义一个或多个字（4 字节）数据。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">.dword</code></td>\n<td><code class=\"language-text\">.dword value1, value2, ...</code></td>\n<td>定义一个或多个双字（8 字节）数据。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">.asciz</code></td>\n<td><code class=\"language-text\">.asciz \"string\"</code></td>\n<td>定义一个以空字符（<code class=\"language-text\">\\0</code>）结尾的字符串。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">.string</code></td>\n<td><code class=\"language-text\">.string \"string\"</code></td>\n<td>定义一个字符串（与 <code class=\"language-text\">.asciz</code> 类似）。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">.space</code></td>\n<td><code class=\"language-text\">.space size</code></td>\n<td>分配指定大小的未初始化空间（以字节为单位）。</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3><strong>2. 内存布局伪指令</strong></h3>\n<table>\n<thead>\n<tr>\n<th><strong>伪指令</strong></th>\n<th><strong>格式</strong></th>\n<th><strong>作用</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">.org</code></td>\n<td><code class=\"language-text\">.org address</code></td>\n<td>设置当前段的位置计数器为指定地址。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">.align</code></td>\n<td><code class=\"language-text\">.align n</code></td>\n<td>将当前位置对齐到 <code class=\"language-text\">2^n</code> 的边界。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">.skip</code></td>\n<td><code class=\"language-text\">.skip size</code></td>\n<td>跳过指定大小的字节（与 <code class=\"language-text\">.space</code> 类似）。</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3><strong>3. 符号定义伪指令</strong></h3>\n<table>\n<thead>\n<tr>\n<th><strong>伪指令</strong></th>\n<th><strong>格式</strong></th>\n<th><strong>作用</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">.globl</code></td>\n<td><code class=\"language-text\">.globl symbol</code></td>\n<td>声明一个全局符号，使其对其他文件可见。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">.local</code></td>\n<td><code class=\"language-text\">.local symbol</code></td>\n<td>声明一个局部符号，使其仅在当前文件中可见。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">.weak</code></td>\n<td><code class=\"language-text\">.weak symbol</code></td>\n<td>声明一个弱符号，如果未定义则不会报错。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">.equ</code></td>\n<td><code class=\"language-text\">.equ name, value</code></td>\n<td>定义一个符号常量。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">.set</code></td>\n<td><code class=\"language-text\">.set name, value</code></td>\n<td>定义一个符号常量（与 <code class=\"language-text\">.equ</code> 类似）。</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3><strong>4. 段控制伪指令</strong></h3>\n<table>\n<thead>\n<tr>\n<th><strong>伪指令</strong></th>\n<th><strong>格式</strong></th>\n<th><strong>作用</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">.text</code></td>\n<td><code class=\"language-text\">.text</code></td>\n<td>切换到代码段，后续定义的指令将存储在代码段中。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">.section</code></td>\n<td><code class=\"language-text\">.section name</code></td>\n<td>切换到指定名称的段。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">.previous</code></td>\n<td><code class=\"language-text\">.previous</code></td>\n<td>切换回上一个段。</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3><strong>5. 条件伪指令</strong></h3>\n<table>\n<thead>\n<tr>\n<th><strong>伪指令</strong></th>\n<th><strong>格式</strong></th>\n<th><strong>作用</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">.if</code></td>\n<td><code class=\"language-text\">.if condition</code></td>\n<td>如果条件为真，则汇编后续代码。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">.else</code></td>\n<td><code class=\"language-text\">.else</code></td>\n<td>与 <code class=\"language-text\">.if</code> 配合使用，表示条件为假时的代码块。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">.endif</code></td>\n<td><code class=\"language-text\">.endif</code></td>\n<td>结束条件汇编块。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">.ifdef</code></td>\n<td><code class=\"language-text\">.ifdef symbol</code></td>\n<td>如果符号已定义，则汇编后续代码。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">.ifndef</code></td>\n<td><code class=\"language-text\">.ifndef symbol</code></td>\n<td>如果符号未定义，则汇编后续代码。</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3><strong>6. 程序入口与结束伪指令</strong></h3>\n<table>\n<thead>\n<tr>\n<th><strong>伪指令</strong></th>\n<th><strong>格式</strong></th>\n<th><strong>作用</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">.entry</code></td>\n<td><code class=\"language-text\">.entry</code></td>\n<td>定义程序入口点（通常由链接器使用）。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">.end</code></td>\n<td><code class=\"language-text\">.end</code></td>\n<td>标记汇编文件的结束。</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3><strong>7. 其他伪指令</strong></h3>\n<table>\n<thead>\n<tr>\n<th><strong>伪指令</strong></th>\n<th><strong>格式</strong></th>\n<th><strong>作用</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">.include</code></td>\n<td><code class=\"language-text\">.include \"filename\"</code></td>\n<td>包含另一个汇编文件。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">.macro</code></td>\n<td><code class=\"language-text\">.macro name arg1, arg2, ...</code></td>\n<td>定义一个宏。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">.endm</code></td>\n<td><code class=\"language-text\">.endm</code></td>\n<td>结束宏定义。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">.rept</code></td>\n<td><code class=\"language-text\">.rept count</code></td>\n<td>重复汇编代码块指定次数。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">.endr</code></td>\n<td><code class=\"language-text\">.endr</code></td>\n<td>结束重复块。</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3><strong>示例代码</strong></h3>\n<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">.data                    # 切换到数据段\r\n    my_var: .word 42     # 定义一个 32 位整数\r\n    msg: .asciz &quot;Hello&quot;  # 定义一个字符串\r\n\r\n.text                    # 切换到代码段\r\n.globl main              # 声明 main 为全局符号\r\nmain:\r\n    la a0, msg           # 加载 msg 的地址到 a0\r\n    li a7, 4             # 设置系统调用号为 4（打印字符串）\r\n    ecall                # 触发系统调用\r\n    li a7, 10            # 设置系统调用号为 10（退出程序）\r\n    ecall                # 触发系统调用\r\n.end                    # 结束汇编文件</code></pre></div>","frontmatter":{"title":"【学习随记】汇编语言_伪指令大全","date":"January 04, 2023","description":"本文将介绍一下汇编语言中常见的伪指令"}},"previous":{"fields":{"slug":"/023_record_Makefile/"},"frontmatter":{"title":"【学习随记】编译神器_Makefile"}},"next":{"fields":{"slug":"/019_HIT_OS_Bochs/"},"frontmatter":{"title":"【哈工大_操作系统】Bochs 汇编级调试方法及指令"}}},"pageContext":{"id":"9b16e5a2-1f46-5e82-8d69-c9108958daa7","previousPostId":"3c1aacd8-e3ca-58de-b357-9c789c6d3118","nextPostId":"6a0d6e81-d3f4-544c-ba69-9f649af7dd5a"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}