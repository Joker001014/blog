{"componentChunkName":"component---src-templates-blog-post-js","path":"/013_HIT_OS_Lab4/","result":{"data":{"site":{"siteMetadata":{"title":"JokerDebug"}},"markdownRemark":{"id":"9480e2bf-816c-5fce-838a-d47165641f14","excerpt":"Github代码仓库链接 本节将更新哈工大《操作系统》课程第四个 Lab 实验 进程运行轨迹的跟踪与统计。按照实验书要求，介绍了非常详细的实验操作流程，并提供了超级无敌详细的代码注释。 实验目的： 掌握 Linux…","html":"<p><a href=\"https://github.com/Joker001014/HIT-OSlab\">Github代码仓库链接</a></p>\n<p>本节将更新哈工大《操作系统》课程第四个 Lab 实验 <strong>进程运行轨迹的跟踪与统计</strong>。按照实验书要求，介绍了非常详细的实验操作流程，并提供了超级无敌详细的代码注释。</p>\n<p><strong>实验目的：</strong></p>\n<blockquote>\n<ul>\n<li>掌握 Linux 下的多进程编程技术；</li>\n<li>通过对进程运行轨迹的跟踪来形象化进程的概念；</li>\n<li>在进程运行轨迹跟踪的基础上进行相应的数据统计，从而能对进程调度算法进行实际的量化评价，更进一步加深对调度和调度算法的理解，获得能在实际操作系统上对调度算法进行实验数据对比的直接经验。</li>\n</ul>\n</blockquote>\n<p><strong>实验任务：</strong></p>\n<blockquote>\n<p>进程在其生命期中的运行轨迹实际上就表现为进程状态的多次切换，如进程创建以后会成为就绪态；当该进程被调度以后会切换到运行态；在运行的过程中如果启动了一个文件读写操作，操作系统会将该进程切换到阻塞态（等待态）从而让出 CPU；当文件读写完毕以后，操作系统会在将其切换成就绪态，等待进程调度算法来调度该进程执行……\r\n1、基于模板 process.c 编写多进程的样本程序，实现如下功能： + 所有子进程都并行运行，每个子进程的实际运行时间一般不超过 30 秒； + 父进程向标准输出打印所有子进程的 id，并在所有子进程都退出后才退出；\r\n2、在 Linux0.11 上实现进程运行轨迹的跟踪。 + 基本任务是在内核中维护一个日志文件 /var/process.log，把从操作系统启动到系统关机过程中所有进程的运行轨迹都记录在这一 log 文件中。\r\n3、在修改过的 0.11 上运行样本程序，通过分析 log 文件，统计该程序建立的所有进程的等待时间、完成时间（周转时间）和运行时间，然后计算平均等待时间，平均完成时间和吞吐量。可以自己编写统计程序，也可以使用 python 脚本程序—— stat_log.py（在 /home/teacher/ 目录下） ——进行统计。\r\n4、修改 0.11 进程调度的时间片，然后再运行同样的样本程序，统计同样的时间数据，和原有的情况对比，体会不同时间片带来的差异。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>文件名</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>hit-操作系统实验指导书.pdf</td>\n<td>哈工大OS实验指导书</td>\n</tr>\n<tr>\n<td>Linux内核完全注释(修正版v3.0).pdf</td>\n<td>赵博士对Linux v0.11 OS进行了详细全面的注释和说明</td>\n</tr>\n<tr>\n<td>file1615.pdf</td>\n<td>BIOS 涉及的中断数据手册</td>\n</tr>\n<tr>\n<td>hit-oslab-linux-20110823.tar.gz</td>\n<td>hit-oslab 实验环境</td>\n</tr>\n<tr>\n<td>gcc-3.4-ubuntu.tar.gz</td>\n<td>Linux v0.11 所使用的编译器</td>\n</tr>\n<tr>\n<td><a href=\"https://blog.csdn.net/weixin_53159274/article/details/137796343?spm=1001.2014.3001.5501\">Bochs 汇编级调试指令</a></td>\n<td>bochs 基本调试指令大全</td>\n</tr>\n<tr>\n<td><a href=\"https://blog.csdn.net/yueyueniaolzp/article/details/82178954\">最全ASCII码对照表0-255</a></td>\n<td>屏幕输出字符对照的 ASCII 码</td>\n</tr>\n<tr>\n<td><a href=\"https://blog.csdn.net/weixin_53159274/article/details/138074386?spm=1001.2014.3001.5501\">x86_64 常用寄存器大全</a></td>\n<td>x86_64 常用寄存器大全</td>\n</tr>\n</tbody>\n</table>\n<h3>一、编写样本程序</h3>\n<blockquote>\n<p>编写 <code class=\"language-text\">process.c</code> 样本程序，实现函数模拟占用 CPU 和 I/O 时间</p>\n</blockquote>\n<p>定义占用 CPU 和 I/O 时间函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">/*\r\n * 此函数按照参数占用 CPU 和 I/O 时间\r\n * last            :     函数实际占用CPU和I/O的总时间，不含在就绪队列中的时间，>=0是必须的\r\n * cpu_time        :     一次连续占用CPU的时间，>=0是必须的\r\n * io_time        :     一次I/O消耗的时间，>=0是必须的\r\n * 如果 last > cpu_time + io_time，则往复多次占用CPU和I/O\r\n * 所有时间的单位为秒\r\n */</span>\r\n<span class=\"token keyword\">void</span> <span class=\"token function\">cpuio_bound</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> last<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cpu_time<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> io_time<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">// tms 结构体记录 用户代码 和 内核代码 运行时间</span>\r\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tms</span> start_time<span class=\"token punctuation\">,</span> current_time<span class=\"token punctuation\">;</span>\r\n    <span class=\"token comment\">// 长整型，记录时钟滴答数</span>\r\n    <span class=\"token class-name\">clock_t</span> utime<span class=\"token punctuation\">,</span> stime<span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">int</span> sleep_time<span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>last <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token comment\">/* CPU Burst */</span>\r\n        <span class=\"token function\">times</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>start_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token comment\">/* 其实只有t.tms_utime才是真正的CPU时间。但我们是在模拟一个\r\n         * 只在用户状态运行的CPU大户，就像“for(;;);”。所以把t.tms_stime\r\n         * 加上很合理。*/</span>\r\n        <span class=\"token keyword\">do</span>\r\n        <span class=\"token punctuation\">{</span>\r\n            <span class=\"token function\">times</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>current_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            utime <span class=\"token operator\">=</span> current_time<span class=\"token punctuation\">.</span>tms_utime <span class=\"token operator\">-</span> start_time<span class=\"token punctuation\">.</span>tms_utime<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 进程执行用户代码时间</span>\r\n            stime <span class=\"token operator\">=</span> current_time<span class=\"token punctuation\">.</span>tms_stime <span class=\"token operator\">-</span> start_time<span class=\"token punctuation\">.</span>tms_stime<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 进程执行内核代码时间</span>\r\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>utime <span class=\"token operator\">+</span> stime<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> HZ <span class=\"token punctuation\">)</span>  <span class=\"token operator\">&lt;</span> cpu_time <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// 得到时钟滴答次数，乘10ms得到真正的时间</span>\r\n        last <span class=\"token operator\">-=</span> cpu_time<span class=\"token punctuation\">;</span>                                            <span class=\"token comment\">// 运行CPU后剩余时间</span>\r\n\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>last <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>\r\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token comment\">/* IO Burst */</span>\r\n        <span class=\"token comment\">/* 用sleep(1)模拟1秒钟的I/O操作 */</span>\r\n        sleep_time<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>sleep_time <span class=\"token operator\">&lt;</span> io_time<span class=\"token punctuation\">)</span>\r\n        <span class=\"token punctuation\">{</span>\r\n            <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                            <span class=\"token comment\">// 模拟 I/O操作 占用进程时间</span>\r\n            sleep_time<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n        last <span class=\"token operator\">-=</span> sleep_time<span class=\"token punctuation\">;</span>                        <span class=\"token comment\">// 运行 CPU + I/O 剩余时间</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>创建多进程并调用占用时间函数</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\r\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\r\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h></span></span>\r\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/times.h></span></span>\r\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\r\n\r\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">HZ</span>    <span class=\"token expression\"><span class=\"token number\">100</span></span></span>\r\n\r\n<span class=\"token keyword\">void</span> <span class=\"token function\">cpuio_bound</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> last<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cpu_time<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> io_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token comment\">/*\r\n1.  所有子进程都并行运行,每个子进程的实际运行时间一般不超过30秒;\r\n2.  父进程向标准输出打印所有子进程的id,并在所有子进程都退出后才退出;\r\n*/</span>\r\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token class-name\">pid_t</span> n_proc<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/*10个子进程 PID*/</span>\r\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        n_proc<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 父进程-返回子进程ID； 子进程-返回0</span>\r\n        <span class=\"token comment\">/*子进程*/</span>\r\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n_proc<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\r\n        <span class=\"token punctuation\">{</span>\r\n            <span class=\"token function\">cpuio_bound</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">/*每个子进程都占用20s*/</span>\r\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>                         <span class=\"token comment\">/*执行完cpuio_bound 以后，结束该子进程*/</span>\r\n        <span class=\"token punctuation\">}</span>\r\n        <span class=\"token comment\">/*fork 失败*/</span>\r\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n_proc<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>\r\n        <span class=\"token punctuation\">{</span>\r\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to fork child process %d!\\n\"</span><span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n        <span class=\"token comment\">/*父进程继续fork， 此处为父进程 */</span>\r\n        <span class=\"token class-name\">pid_t</span> father <span class=\"token operator\">=</span> <span class=\"token function\">getpid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 获得进程标志符</span>\r\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Now is the father's pid: %d\\n\"</span><span class=\"token punctuation\">,</span> father<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token comment\">/*打印所有子进程PID*/</span>\r\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\r\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Child PID: %d\\n\"</span><span class=\"token punctuation\">,</span>n_proc<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token comment\">/*等待所有子进程完成*/</span>\r\n    <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">/*Linux 0.11 上 gcc要求必须有一个参数, gcc3.4+则不需要*/</span> \r\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>编译 <code class=\"language-text\">process.c</code> 样本程序</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">gcc -o myprocess process.c</code></pre></div>\n<h3>二、维护日志文件</h3>\n<blockquote>\n<p>把从操作系统启动到系统关机过程中所有的进程运行轨迹都记录在log文件中</p>\n</blockquote>\n<p>1、内核启动时就打开 process.log 文件</p>\n<p><code class=\"language-text\">init/main.c</code> 文件中添加如下代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">//……</span>\r\n<span class=\"token function\">move_to_user_mode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\">/***************添加开始***************/</span>\r\n<span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>drive_info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/dev/tty0\"</span><span class=\"token punctuation\">,</span>O_RDWR<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \r\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token function\">dup</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        \r\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token function\">dup</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        \r\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/var/process.log\"</span><span class=\"token punctuation\">,</span>O_CREAT<span class=\"token operator\">|</span>O_TRUNC<span class=\"token operator\">|</span>O_WRONLY<span class=\"token punctuation\">,</span><span class=\"token number\">0666</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token comment\">/***************添加结束***************/</span>\r\n\r\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>        <span class=\"token comment\">/* we count on this going ok */</span>\r\n    <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token comment\">//……</span></code></pre></div>\n<p>其中 <code class=\"language-text\">init()</code> 函数建立了文件描述符 0、1 、2和/dev/tty0的关联，它们分别就是 <code class=\"language-text\">stdin</code>、<code class=\"language-text\">stdout</code> 和 <code class=\"language-text\">stderr</code>。这三者的值是系统标准。仿照将把 log 文件的描述符关联到 3。此后 fork() 将会继承这些文件描述符</p>\n<p>2、编写向 log 文件写函数 fprintk</p>\n<p>在内核状态下无法直接使用<code class=\"language-text\">write()</code>函数向log文件输出，因此需要自己编写函数。参考了 <code class=\"language-text\">printk()</code> 和 <code class=\"language-text\">sys_write()</code> 而写成，向 <code class=\"language-text\">kernel/printk.c</code> 文件中添加如下函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"linux/sched.h\"</span></span>\r\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"sys/stat.h\"</span></span>\r\n\r\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">char</span> logbuf<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">int</span> <span class=\"token function\">fprintk</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>fmt<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    va_list args<span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">file</span> <span class=\"token operator\">*</span> file<span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">m_inode</span> <span class=\"token operator\">*</span> inode<span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token function\">va_start</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> fmt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    count<span class=\"token operator\">=</span><span class=\"token function\">vsprintf</span><span class=\"token punctuation\">(</span>logbuf<span class=\"token punctuation\">,</span> fmt<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">va_end</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token comment\">/* 如果输出到stdout或stderr，直接调用sys_write即可 */</span>\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fd <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token function\">__asm__</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"push %%fs\\n\\t\"</span>\r\n            <span class=\"token string\">\"push %%ds\\n\\t\"</span>\r\n            <span class=\"token string\">\"pop %%fs\\n\\t\"</span>\r\n            <span class=\"token string\">\"pushl %0\\n\\t\"</span>\r\n        <span class=\"token comment\">/* 注意对于Windows环境来说，是_logbuf,下同 */</span>\r\n            <span class=\"token string\">\"pushl $logbuf\\n\\t\"</span> \r\n            <span class=\"token string\">\"pushl %1\\n\\t\"</span>\r\n        <span class=\"token comment\">/* 注意对于Windows环境来说，是_sys_write,下同 */</span>\r\n            <span class=\"token string\">\"call sys_write\\n\\t\"</span> \r\n            <span class=\"token string\">\"addl $8,%%esp\\n\\t\"</span>\r\n            <span class=\"token string\">\"popl %0\\n\\t\"</span>\r\n            <span class=\"token string\">\"pop %%fs\"</span>\r\n            <span class=\"token operator\">::</span><span class=\"token string\">\"r\"</span> <span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"r\"</span> <span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token string\">\"ax\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"cx\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"dx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token keyword\">else</span>    \r\n<span class=\"token comment\">/* 假定>=3的描述符都与文件关联。事实上，还存在很多其它情况，这里并没有考虑。*/</span>\r\n    <span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">/* 从进程0的文件描述符表中得到文件句柄 */</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>file<span class=\"token operator\">=</span>task<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>filp<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    \r\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n        inode<span class=\"token operator\">=</span>file<span class=\"token operator\">-></span>f_inode<span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token function\">__asm__</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"push %%fs\\n\\t\"</span>\r\n            <span class=\"token string\">\"push %%ds\\n\\t\"</span>\r\n            <span class=\"token string\">\"pop %%fs\\n\\t\"</span>\r\n            <span class=\"token string\">\"pushl %0\\n\\t\"</span>\r\n            <span class=\"token string\">\"pushl $logbuf\\n\\t\"</span>\r\n            <span class=\"token string\">\"pushl %1\\n\\t\"</span>\r\n            <span class=\"token string\">\"pushl %2\\n\\t\"</span>\r\n            <span class=\"token string\">\"call file_write\\n\\t\"</span>\r\n            <span class=\"token string\">\"addl $12,%%esp\\n\\t\"</span>\r\n            <span class=\"token string\">\"popl %0\\n\\t\"</span>\r\n            <span class=\"token string\">\"pop %%fs\"</span>\r\n            <span class=\"token operator\">::</span><span class=\"token string\">\"r\"</span> <span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"r\"</span> <span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"r\"</span> <span class=\"token punctuation\">(</span>inode<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token string\">\"ax\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"cx\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"dx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>使用示例：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// 向stdout打印正在运行的进程的ID</span>\r\n<span class=\"token function\">fprintk</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"The ID of running process is %ld\"</span><span class=\"token punctuation\">,</span> current<span class=\"token operator\">-></span>pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \r\n\r\n<span class=\"token comment\">// 向log文件输出跟踪进程运行轨迹</span>\r\n<span class=\"token function\">fprintk</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%ld\\t%c\\t%ld\\n\"</span><span class=\"token punctuation\">,</span> current<span class=\"token operator\">-></span>pid<span class=\"token punctuation\">,</span> <span class=\"token char\">'R'</span><span class=\"token punctuation\">,</span> jiffies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \r\n<span class=\"token comment\">// 进程id、进程状态、滴答数（开机以来经历多少个10ms）</span></code></pre></div>\n<p>3、向状态切换点添加输出log文件代码</p>\n<blockquote>\n<p>需要对 <code class=\"language-text\">/kernel</code> 文件夹下的 <code class=\"language-text\">fork.c, sched.c, exit.c</code> 有所了解。<code class=\"language-text\">linux 0.11</code>中进程状态有三种：就绪（运行）、等待、退出。</p>\n</blockquote>\n<ol>\n<li>新建进程时</li>\n</ol>\n<p><code class=\"language-text\">fork()</code> -> <code class=\"language-text\">sys_fork()</code>-> <code class=\"language-text\">kernel/system_call.s</code> -> <code class=\"language-text\">copy_process()</code>，在 <code class=\"language-text\">kernel/fork.c</code> 文件中添加输出语句</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">copy_process</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nr<span class=\"token punctuation\">,</span>……<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n<span class=\"token comment\">//    ……</span>\r\n<span class=\"token comment\">// 设置 start_time 为 jiffies</span>\r\n    p<span class=\"token operator\">-></span>start_time <span class=\"token operator\">=</span> jiffies<span class=\"token punctuation\">;</span>\r\n<span class=\"token comment\">//  新建进程，向log文件输出，'N'-新建</span>\r\n    <span class=\"token function\">fprintk</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%ld\\t%c\\t%ld\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>pid<span class=\"token punctuation\">,</span> <span class=\"token char\">'N'</span><span class=\"token punctuation\">,</span> jiffies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \r\n<span class=\"token comment\">//       ……</span>\r\n    p<span class=\"token operator\">-></span>state <span class=\"token operator\">=</span> TASK_RUNNING<span class=\"token punctuation\">;</span>    \r\n<span class=\"token comment\">//  设置进程状态为就绪，向log文件输出，'J'-就绪</span>\r\n    <span class=\"token function\">fprintk</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%ld\\t%c\\t%ld\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>pid<span class=\"token punctuation\">,</span> <span class=\"token char\">'J'</span><span class=\"token punctuation\">,</span> jiffies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \r\n    \r\n    <span class=\"token keyword\">return</span> last_pid<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"2\">\n<li>进入睡眠态</li>\n</ol>\n<p>修改 <code class=\"language-text\">kenrel/sched.c</code> 中的 sys_pause() 和 sleep_on() 和 interruptible_sleep_on()</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">sys_pause</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n\tcurrent<span class=\"token operator\">-></span>state <span class=\"token operator\">=</span> TASK_INTERRUPTIBLE<span class=\"token punctuation\">;</span>\r\n    <span class=\"token comment\">// 输出log文件</span>\r\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>current<span class=\"token operator\">-></span>pid <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\r\n    \t<span class=\"token function\">fprintk</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%ld\\t%c\\t%ld\\n\"</span><span class=\"token punctuation\">,</span> current<span class=\"token operator\">-></span>pid<span class=\"token punctuation\">,</span> <span class=\"token char\">'W'</span><span class=\"token punctuation\">,</span> jiffies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">void</span> <span class=\"token function\">sleep_on</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">task_struct</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">task_struct</span> <span class=\"token operator\">*</span>tmp<span class=\"token punctuation\">;</span>\r\n<span class=\"token comment\">//    ……</span>\r\n    tmp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\r\n<span class=\"token comment\">// 仔细阅读，实际上是将 current 插入“等待队列”头部，tmp 是原来的头部</span>\r\n    <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> current<span class=\"token punctuation\">;</span>  \r\n<span class=\"token comment\">// 切换到睡眠态</span>\r\n    current<span class=\"token operator\">-></span>state <span class=\"token operator\">=</span> TASK_UNINTERRUPTIBLE<span class=\"token punctuation\">;</span> \r\n\r\n\t<span class=\"token comment\">// 输出log文件</span>\r\n    <span class=\"token function\">fprintk</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%ld\\t%c\\t%ld\\n\"</span><span class=\"token punctuation\">,</span> current<span class=\"token operator\">-></span>pid<span class=\"token punctuation\">,</span> <span class=\"token char\">'W'</span><span class=\"token punctuation\">,</span> jiffies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \r\n\r\n    <span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \r\n\t<span class=\"token comment\">// 唤醒队列中的上一个（tmp）睡眠进程。</span>\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n        tmp<span class=\"token operator\">-></span>state<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n    \t<span class=\"token comment\">//  输出log文件</span>\r\n    \t<span class=\"token function\">fprintk</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%ld\\t%c\\t%ld\\n\"</span><span class=\"token punctuation\">,</span> tmp<span class=\"token operator\">-></span>pid<span class=\"token punctuation\">,</span> <span class=\"token char\">'J'</span><span class=\"token punctuation\">,</span> jiffies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">void</span> <span class=\"token function\">interruptible_sleep_on</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">task_struct</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">task_struct</span> <span class=\"token operator\">*</span>tmp<span class=\"token punctuation\">;</span>\r\n       …\r\n    tmp<span class=\"token operator\">=</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\r\n    <span class=\"token operator\">*</span>p<span class=\"token operator\">=</span>current<span class=\"token punctuation\">;</span>\r\nrepeat<span class=\"token operator\">:</span>    current<span class=\"token operator\">-></span>state <span class=\"token operator\">=</span> TASK_INTERRUPTIBLE<span class=\"token punctuation\">;</span>\r\n\r\n    \t   <span class=\"token comment\">//  输出log文件</span>\r\n    \t\t<span class=\"token function\">fprintk</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%ld\\t%c\\t%ld\\n\"</span><span class=\"token punctuation\">,</span> current<span class=\"token operator\">-></span>pid<span class=\"token punctuation\">,</span> <span class=\"token char\">'W'</span><span class=\"token punctuation\">,</span> jiffies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \r\n    <span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">!=</span> current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \r\n        <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>state<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token comment\">//  输出log文件</span>\r\n    \t<span class=\"token function\">fprintk</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%ld\\t%c\\t%ld\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>pid<span class=\"token punctuation\">,</span> <span class=\"token char\">'J'</span><span class=\"token punctuation\">,</span> jiffies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \r\n        <span class=\"token keyword\">goto</span> repeat<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token operator\">*</span>p<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\r\n    \r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n        tmp<span class=\"token operator\">-></span>state<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n    \t<span class=\"token comment\">//  输出log文件</span>\r\n    \t<span class=\"token function\">fprintk</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%ld\\t%c\\t%ld\\n\"</span><span class=\"token punctuation\">,</span> tmp<span class=\"token operator\">-></span>pid<span class=\"token punctuation\">,</span> <span class=\"token char\">'J'</span><span class=\"token punctuation\">,</span> jiffies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>修改 <code class=\"language-text\">exit.c</code> 中的 sys_waitpid()</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">sys_waitpid</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">pid_t</span> pid<span class=\"token punctuation\">,</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token operator\">*</span> stat_addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> options<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n<span class=\"token comment\">//    ……</span>\r\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>options <span class=\"token operator\">&amp;</span> WNOHANG<span class=\"token punctuation\">)</span>\r\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n\t\tcurrent<span class=\"token operator\">-></span>state<span class=\"token operator\">=</span>TASK_INTERRUPTIBLE<span class=\"token punctuation\">;</span>\r\n        <span class=\"token comment\">//  0号进程是守护进程，cpu空闲的时候一直在waiting，输出它的话是不会通过脚本检查的哦</span>\r\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>current<span class=\"token operator\">-></span>pid <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\r\n        \t<span class=\"token function\">fprintk</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%ld\\t%c\\t%ld\\n\"</span><span class=\"token punctuation\">,</span> current<span class=\"token operator\">-></span>pid<span class=\"token punctuation\">,</span> <span class=\"token char\">'W'</span><span class=\"token punctuation\">,</span> jiffies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \r\n\t\t<span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token comment\">//    ……</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"3\">\n<li>调度算法</li>\n</ol>\n<p>调度程序在分配CPU时会修改进程状态，同样需要记录，修改 <code class=\"language-text\">kernel/sched.c</code> 中的 schedule()：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n<span class=\"token comment\">//    ……</span>\r\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>signal <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>_BLOCKABLE <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>blocked<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\r\n            <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>state<span class=\"token operator\">==</span>TASK_INTERRUPTIBLE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n                <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>state<span class=\"token operator\">=</span>TASK_RUNNING<span class=\"token punctuation\">;</span>\r\n                <span class=\"token comment\">/*可中断睡眠 => 就绪*/</span>\r\n                <span class=\"token function\">fprintk</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"%d\\tJ\\t%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>pid<span class=\"token punctuation\">,</span>jiffies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span>\r\n                \r\n        <span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">//    ……</span>\r\n    <span class=\"token comment\">// 如果当前进程和 next 进程不一样，则输出log文件</span>\r\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>current<span class=\"token operator\">-></span>pid <span class=\"token operator\">!=</span> task<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">]</span> <span class=\"token operator\">-></span>pid<span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token comment\">// 当前进程由 运行 -> 就绪</span>\r\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>current<span class=\"token operator\">-></span>state <span class=\"token operator\">==</span> TASK_RUNNING<span class=\"token punctuation\">)</span>\r\n            <span class=\"token function\">fprintk</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"%d\\tJ\\t%d\\n\"</span><span class=\"token punctuation\">,</span>current<span class=\"token operator\">-></span>pid<span class=\"token punctuation\">,</span>jiffies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token comment\">// next进程由 就绪 -> 运行</span>\r\n        <span class=\"token function\">fprintk</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"%d\\tR\\t%d\\n\"</span><span class=\"token punctuation\">,</span>task<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>pid<span class=\"token punctuation\">,</span>jiffies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token function\">switch_to</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"4\">\n<li>唤醒</li>\n</ol>\n<p>修改 <code class=\"language-text\">kernel/sched.c</code> 中的 wake_ip()：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">wake_up</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">task_struct</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>state<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token comment\">// 唤醒 最后进入等待序列的 进程</span>\r\n        <span class=\"token function\">fprintk</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"%d\\tJ\\t%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>pid<span class=\"token punctuation\">,</span>jiffies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token operator\">*</span>p<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"5\">\n<li>进程退出</li>\n</ol>\n<p>进程结束了运行或在半途中终止了运行，那么内核就需要释放该进程所占用的系统资源，在 <code class=\"language-text\">kernel/exit.c</code> 文件中添加输出log文件指令：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">do_exit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> code<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n<span class=\"token comment\">//    ……</span>\r\n\tcurrent<span class=\"token operator\">-></span>state <span class=\"token operator\">=</span> TASK_ZOMBIE<span class=\"token punctuation\">;</span>\r\n\t\r\n    <span class=\"token comment\">// 退出一个进程，输出log文件</span>\r\n    <span class=\"token function\">fprintk</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%ld\\t%c\\t%ld\\n\"</span><span class=\"token punctuation\">,</span> current<span class=\"token operator\">-></span>pid<span class=\"token punctuation\">,</span> <span class=\"token char\">'E'</span><span class=\"token punctuation\">,</span> jiffies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \r\n    \r\n\tcurrent<span class=\"token operator\">-></span>exit_code <span class=\"token operator\">=</span> code<span class=\"token punctuation\">;</span>\r\n\t<span class=\"token function\">tell_father</span><span class=\"token punctuation\">(</span>current<span class=\"token operator\">-></span>father<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* just to suppress warnings */</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>总结：实现log进程全面跟踪，Linux0.11包括六种状态转移，</p>\n<ul>\n<li>就绪 到 运行 ：<code class=\"language-text\">schedule()</code></li>\n<li>运行 到 就绪 ：<code class=\"language-text\">schedule()</code></li>\n<li>运行 到 睡眠 ： <code class=\"language-text\">sleep_on()</code> 、<code class=\"language-text\">interruptible_sleep_on()</code>、<code class=\"language-text\">sys_pause()</code> 、<code class=\"language-text\">sys_waitpid()</code></li>\n<li>睡眠 到 就绪 ：<code class=\"language-text\">wake_up()</code></li>\n<li>新建</li>\n<li>退出</li>\n</ul>\n<blockquote>\n<p>注意：系统无事可做的时候，进程 0 会不停地调用 <code class=\"language-text\">sys_pause()</code>，以激活调度算法。此时它的状态可以是等待态，等待有其它可运行的进程；也可以叫运行态，它是唯一一个在 CPU 上运行的进程，只不过运行的效果是等待。所以输出log文件时经常要判断当前进程pid是否为零，防止<code class=\"language-text\">sys_pause()</code> 不断输出log文件</p>\n</blockquote>\n<p>编程输出log文件：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">cd</span> ~/my_space/OS_HIT/oslab_Lab3/linux-0.11\r\n<span class=\"token function\">make</span>     // 编译\r\n<span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>\r\n./run\r\n\r\n// 在 Bochs 中查看 log 文件\r\n<span class=\"token function\">more</span> /var/process.log\r\n<span class=\"token function\">sync</span>   // 退出 bochs 时，刷新 cache，确保文件确实写入了磁盘。\r\n\r\n// 将 process.log 取出到 Ubuntu\r\n<span class=\"token function\">sudo</span> ./mount-hdc\r\n<span class=\"token builtin class-name\">cd</span> hdc/var\r\n<span class=\"token function\">mv</span> process.log <span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>\r\n// 此时即可在Ubuntu中查看log文件了</code></pre></div>\n<h3>三、统计时间与调度算法修改</h3>\n<p>使用 python 代码计算数据统计，计算平均周转时间、平均等待时间和吞吐率</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> python\r\n<span class=\"token function\">chmod</span> +x stat_log.py\r\n./stat_log.py process.log <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span> <span class=\"token number\">5</span> <span class=\"token parameter variable\">-g</span> <span class=\"token operator\">|</span> <span class=\"token function\">more</span></code></pre></div>\n<p>按照实验任务书，接下来需要修改时间片大小再进行统计。具体修改 <code class=\"language-text\">include/linux/sched.h</code> 文件中的 INIT_TASK 宏定义第三个值，即修改15为期望的时间片大小，再运行 <code class=\"language-text\">stat_log.py</code> 分析</p>\n<div class=\"gatsby-highlight\" data-language=\"h\"><pre class=\"language-h\"><code class=\"language-h\">#define INIT_TASK \\\r\n/* state etc */    { 0,15,15, \\\r\n/* signals */    0,{{},},0, \\</code></pre></div>\n<blockquote>\n<p>依次将时间偏设为1，5，10，15，20，25，50，100，150后，经统计分析log文件可以发现：</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1）在一定的范围内，平均等待时间，平均完成时间的变化随着时间片的增大而减小。这是因为在时间片小的情况下，cpu将时间耗费在调度切换上，所以平均等待时间增加。\r\n2）超过一定的范围之后，这些参数将不再有明显的变化，这是因为在这种情况下，RR轮转调度就变成了FCFS先来先服务了。随着时间片的修改，吞吐量始终没有明显的变化，这是因为在单位时间内，系统所能完成的进程数量是不会变的。</code></pre></div>","frontmatter":{"title":"【哈工大_操作系统实验】Lab4 进程运行轨迹的跟踪与统计","date":"September 21, 2024","description":"本文将介绍哈工大操作系统实验课Lab4 进程运行轨迹的跟踪与统计"}},"previous":{"fields":{"slug":"/012_HIT_OS_Lab3/"},"frontmatter":{"title":"【哈工大_操作系统实验】Lab3 系统调用"}},"next":{"fields":{"slug":"/014_HIT_OS_Lab5/"},"frontmatter":{"title":"【哈工大_操作系统实验】Lab5 基于内核栈切换的进程切换"}}},"pageContext":{"id":"9480e2bf-816c-5fce-838a-d47165641f14","previousPostId":"cba3263f-08ed-5367-b800-3514ab6a2aa5","nextPostId":"bf47b7f4-595d-501d-b207-be0c83d803f8"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}